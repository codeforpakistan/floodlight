# Generated by Django 5.2.5 on 2025-09-02 13:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='category',
            options={'ordering': ['category_type', 'name'], 'verbose_name_plural': 'Categories'},
        ),
        migrations.AddField(
            model_name='category',
            name='category_type',
            field=models.CharField(choices=[('problem', 'Problem/Issue'), ('service', 'Service/Solution'), ('information', 'Information/Data')], default='problem', max_length=20),
        ),
        migrations.AddField(
            model_name='category',
            name='icon',
            field=models.CharField(blank=True, help_text='CSS icon class or emoji', max_length=50),
        ),
        migrations.AlterField(
            model_name='field',
            name='need',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='app.need'),
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severity', models.CharField(choices=[('minor', 'Minor'), ('moderate', 'Moderate'), ('major', 'Major'), ('critical', 'Critical'), ('catastrophic', 'Catastrophic')], default='moderate', max_length=20)),
                ('affected_population', models.PositiveIntegerField(blank=True, help_text='Estimated number of people affected', null=True)),
                ('infrastructure_type', models.CharField(blank=True, help_text='Type of infrastructure affected (road, bridge, building, etc.)', max_length=50)),
                ('estimated_repair_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('repair_time_estimate', models.CharField(blank=True, help_text="Estimated time to repair (e.g., '2 weeks', '3 months')", max_length=100)),
                ('blocks_access_to', models.TextField(blank=True, help_text='What areas/services this problem blocks access to')),
                ('dependencies', models.ManyToManyField(blank=True, help_text='Other problems that must be solved first', to='app.problem')),
                ('need', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='problem_details', to='app.need')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_type', models.CharField(choices=[('shelter', 'Shelter/Accommodation'), ('food', 'Food Distribution'), ('medical', 'Medical Services'), ('education', 'Educational Services'), ('water', 'Water/Sanitation'), ('rescue', 'Rescue Operations'), ('transport', 'Transportation'), ('communication', 'Communication'), ('financial', 'Financial Aid'), ('other', 'Other Services')], max_length=50)),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Maximum number of people that can be served', null=True)),
                ('current_occupancy', models.PositiveIntegerField(default=0, help_text='Current number of people being served')),
                ('operating_hours', models.CharField(blank=True, help_text="e.g., '24/7', 'Mon-Fri 9AM-6PM'", max_length=100)),
                ('start_date', models.DateField(blank=True, help_text='When service started operating', null=True)),
                ('end_date', models.DateField(blank=True, help_text='When service will stop (if known)', null=True)),
                ('eligibility_criteria', models.TextField(blank=True, help_text='Who is eligible for this service')),
                ('requirements', models.TextField(blank=True, help_text='What people need to bring/have to access service')),
                ('need', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='service_details', to='app.need')),
                ('provider_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.organization')),
            ],
        ),
    ]
